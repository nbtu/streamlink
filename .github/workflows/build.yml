name: Build single-file Streamlink (Windows)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip and install build/runtime deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # 安装项目依赖、versioningit（用于生成版本号）以及 pyinstaller
          pip install ".[decompress]" versioningit pyinstaller toml
        shell: pwsh

      - name: Generate src/streamlink/_version.py (use versioningit or fallback)
        run: |
          # 尝试使用 versioningit 生成版本号；失败则回退到 pyproject.toml default-version
          $version = ""
          try {
            $version = & python -m versioningit
          } catch {
            Write-Host "versioningit not runnable, falling back to pyproject.toml default-version"
            $version = & python - <<'PY'
import toml, sys
data = toml.load("pyproject.toml")
print(data.get("tool",{}).get("versioningit",{}).get("default-version","0.0.0+unknown"))
PY
          }

          if (-not $version) { $version = "0.0.0+unknown" }

          "__version__ = `"$version`"" | Out-File -FilePath src/streamlink/_version.py -Encoding utf8
          Get-Content src/streamlink/_version.py
        shell: pwsh

      - name: Install the package into venv (editable not needed)
        run: |
          # 安装本项目到当前 Python 环境，pyinstaller 会根据环境收集依赖
          pip install --upgrade .
        shell: pwsh

      - name: Create PyInstaller entry script
        run: |
          mkdir -Force build
          @"
from streamlink_cli.main import main

if __name__ == '__main__':
    # call the CLI entry point
    main()
"@ | Out-File -FilePath build/entry_point.py -Encoding utf8
          Get-Content build/entry_point.py
        shell: pwsh

      - name: Run PyInstaller (produce single-file EXE)
        run: |
          # Clean up any previous build artifacts
          if (Test-Path build/entry_point.spec) { Remove-Item build/entry_point.spec -Force }
          pyinstaller --noconfirm --onefile --name streamlink build/entry_point.py
          ls -File dist
        shell: pwsh
        env:
          # (可选) 如果你希望在 exe 中嵌入一些额外信息，可以通过环境变量传入
          STREAMLINK_BUILD=true

      - name: Collect artifacts and zip
        run: |
          mkdir -Force release
          $exe = Join-Path -Path (Get-Location) -ChildPath "dist/streamlink.exe"
          if (-not (Test-Path $exe)) {
            Write-Error "Expected dist/streamlink.exe not found"
            exit 1
          }
          Copy-Item $exe -Destination release/streamlink.exe -Force

          # 包含 LICENSE 和 README 便于分发
          if (Test-Path LICENSE) { Copy-Item LICENSE release/ } 
          if (Test-Path README.md) { Copy-Item README.md release/ }

          Compress-Archive -Path release/* -DestinationPath release/streamlink-windows.zip -Force
          Write-Host "Created release/streamlink-windows.zip"
          Get-ChildItem release -Force
        shell: pwsh

      - name: Upload build artifact (exe + zip)
        uses: actions/upload-artifact@v4
        with:
          name: streamlink-windows
          path: |
            release/streamlink.exe
            release/streamlink-windows.zip
