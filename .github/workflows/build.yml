name: Build single-file Streamlink (Windows)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip and install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          # 安装项目依赖、versioningit 以及 pyinstaller
          pip install ".[decompress]" versioningit pyinstaller toml

      - name: Generate src/streamlink/_version.py
        shell: pwsh
        run: |
          try {
            $version = python -m versioningit
          } catch {
            Write-Host "versioningit not available, falling back to pyproject.toml default-version"
            $version = python -c "import toml; print(toml.load('pyproject.toml').get('tool',{}).get('versioningit',{}).get('default-version','0.0.0+unknown'))"
          }

          if (-not $version) { $version = "0.0.0+unknown" }

          "__version__ = `"$version`"" | Out-File src/streamlink/_version.py -Encoding utf8
          Get-Content src/streamlink/_version.py

      - name: Install the package into venv
        shell: pwsh
        run: |
          pip install --upgrade .

      - name: Create PyInstaller entry script
        shell: pwsh
        run: |
          mkdir -Force build
          @"
from streamlink_cli.main import main

if __name__ == '__main__':
    main()
"@ | Out-File -FilePath build/entry_point.py -Encoding utf8
          Get-Content build/entry_point.py

      - name: Run PyInstaller to produce single-file EXE
        shell: pwsh
        run: |
          if (Test-Path build/entry_point.spec) { Remove-Item build/entry_point.spec -Force }
          pyinstaller --noconfirm --onefile --name streamlink build/entry_point.py
          ls -File dist

      - name: Package release zip
        shell: pwsh
        run: |
          mkdir -Force release
          $exe = Join-Path -Path (Get-Location) -ChildPath "dist/streamlink.exe"
          if (-not (Test-Path $exe)) {
            Write-Error "Expected dist/streamlink.exe not found"
            exit 1
          }
          Copy-Item $exe -Destination release/streamlink.exe -Force
          if (Test-Path LICENSE) { Copy-Item LICENSE release/ }
          if (Test-Path README.md) { Copy-Item README.md release/ }
          Compress-Archive -Path release/* -DestinationPath release/streamlink-windows.zip -Force
          Write-Host "Created release/streamlink-windows.zip"
          Get-ChildItem release -Force

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: streamlink-windows
          path: |
            release/streamlink.exe
            release/streamlink-windows.zip
